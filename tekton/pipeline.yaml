# This pipeline needs the following tasks from Tekton Hub
#   - git-clone
#   - flake8
#   - nose
#   - buildah
#
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: cd-pipeline
spec:
  workspaces:
    - name: pipeline-workspace
  params:
    - name: repo-url
      type: string  # Specify the type of parameter
    - name: branch
      type: string  # Specify the type of parameter
      default: main
    - name: build-image
      type: string  # Define the build image parameter

  tasks:
    - name: init
      workspaces:
        - name: pipeline-workspace  # Match the workspace name defined above
      taskRef:
        name: cleanup  # Ensure that the cleanup task is defined in your Tekton tasks

    - name: clone
      workspaces:
        - name: pipeline-workspace  # Match the workspace name defined above
      taskRef:
        name: git-clone  # Ensure that the git-clone task is available
      params:
        - name: url
          value: $(params.repo-url)
        - name: revision
          value: $(params.branch)
      runAfter:
        - init

    - name: lint
      workspaces:
        - name: pipeline-workspace  # Match the workspace name defined above
      taskRef:
        name: flake8  # Ensure that the flake8 task is available
      params:
        - name: image
          value: "python:3.9-slim"
        - name: args
          value: ["--count", "--max-complexity=10", "--max-line-length=127", "--statistics"]
      runAfter:
        - clone

    - name: tests
      workspaces:
        - name: pipeline-workspace  # Match the workspace name defined above
      taskRef:
        name: nose  # Ensure that the nose task is available
      params:
        - name: database_uri
          value: "sqlite:///test.db"
        - name: args
          value: "-v --with-spec --spec-color"
      runAfter:
        - clone

    - name: build
      workspaces:
        - name: pipeline-workspace  # Match the workspace name defined above
      taskRef:
        name: buildah
        kind: ClusterTask
      params:
        - name: IMAGE
          value: "$(params.build-image)"
      runAfter:
        - tests
        - lint
    - name: deploy
      workspaces:
        - name: manifest-dir
          workspace: pipeline-workspace
      taskRef:
        name: openshift-client
        kind: ClusterTask
      params:
      - name: SCRIPT
        value: |
          echo "Updating manifest..."
          sed -i "s|IMAGE_NAME_HERE|$(params.build-image)|g" deploy/deployment.yaml
          cat deploy/deployment.yaml
          echo "Deploying to OpenShift..."
          oc apply -f deploy/
          oc get pods -l app=accounts
      runAfter:
        - build